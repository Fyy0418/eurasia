#!<<PYTHON>>
import sys
from os.path import dirname, abspath, join as path_join

base = abspath(path_join(dirname(__file__), '..'))
sys.path.append(base)
sys.path.append(path_join(base, 'lib'))

from eurasia import pyetc, routing, utility

env = dict(
	bin = lambda filename: path_join(base, 'bin', filename),
	etc = lambda filename: path_join(base, 'etc', filename),
	lib = lambda filename: path_join(base, 'lib', filename),
	tmp = lambda filename: path_join(base, 'tmp', filename),
	var = lambda filename: path_join(base, 'var', filename),
	config=routing.config, Products=routing.Products, Server=routing.config,
	Daemon=lambda **kw: None)

try:
	config = pyetc.load(env['etc']('eurasiad.conf'), env=env)
except routing.error, e:
	print >> sys.stderr, 'error: %s' %e
	sys.exit()

if len(sys.argv) == 2:
	libc = config.libc if hasattr(config, 'libc') else '/lib/libc.so.6'
	utility.setprocname(sys.argv[1], libc=libc)

elif hasattr(config, 'procname'):
	libc = config.libc if hasattr(config, 'libc') else '/lib/libc.so.6'
	utility.setprocname(config.procname, libc=libc)

cpus = True
if hasattr(config, 'multicore'):
	if not isinstance(config.multicore, (int, bool)):
		print >> sys.stderr, 'error: multicore must be bool or integer'
		sys.exit()

	cpus = config.multicore

if hasattr(config, 'user'):
	try:
		utility.setuid(config.user)
	except OSError, e:
		print >> sys.stderr, 'error: %s' %e
		sys.exit()

if not (bool(config.verbose) if hasattr(config, 'verbose') else False):
	utility.dummy()

from eurasia.web import mainloop
mainloop(cpus)
